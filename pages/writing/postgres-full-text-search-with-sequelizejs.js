import WithPost from '../../helpers/with-post';

export default WithPost({
  title: 'Postgres Full Text Search With Sequelize.js',
  date: 'December, 2013',
  html: `
  <p>In order to use Postgres' built in full-text search functionality with the&nbsp;<a href="http://sequelizejs.com/">Sequelize.js ORM</a>&nbsp;there are just a few things that need to be done:</p><p><br></p><p></p><ol><li>Add a TSVector as a column on the relevant model</li><li>Add a text search index using the vector that was just created</li><li>Update the vector whenever the model is changed</li><li>Add a 'search' method to our model</li></ol><br><p></p><p>This can be done with a fairly small amount of code. If you just want to skip to the end result, check out <a href="https://gist.github.com/mathisonian/8074838">this gist</a>.</p><p><br></p><h3>Adding the Vector</h3><div>Let's take a blog post as an example. With sequelize, traditionally one would create a file called Post.js, and it would look something like this:</div><script src="https://gist.github.com/mathisonian/da4e5ed0899e45002cd2.js"></script><div>We want to add the vector using sequelize's raw \`query\` method, but in order to make this repeatable, we can wrap this in a class method on the Post object.</div><div>The Postgres SQL syntax would look like</div><script src="https://gist.github.com/mathisonian/c2461693a2f0bdc69bf1.js"></script><div>allowing us to put the vector on as many fields as we would like. Translated to sequelize syntax, we get something like</div><script src="https://gist.github.com/mathisonian/918815c49d9de0398c49.js"></script><h3>Adding the Index</h3><div>To add the index we'll just extend the function that we used to create the vector, trying to execute SQL that looks like</div><script src="https://gist.github.com/mathisonian/66b6ae2dddb8c594b0ba.js"></script><div>Converted to sequelize, the completed function looks like </div><script src="https://gist.github.com/mathisonian/f28a44312704909da241.js"></script><div>We will want to run this function after sequelize has synced all the tables in the database.</div><h3>Adding an accessor method</h3><div>We want to be able to conveniently search against this index, so to keep the syntax like the rest of sequelize, I suggest adding another classMethod called search</div><script src="https://gist.github.com/mathisonian/ea2c6b966a52776a11e7.js"></script><div>that can then be called like</div><script src="https://gist.github.com/mathisonian/23946ea8d8645bd33efd.js"></script><div>which should look familiar to sequelize users.</div><h3>Putting it all together</h3><div>I've added a github gist that ties this all together, showing how the Post model should look, and how one would create the index after sequelize has synced itself</div><script src="https://gist.github.com/mathisonian/8074838.js"></script>
`
});
