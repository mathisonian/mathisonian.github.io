import WithPost from '../../helpers/with-post';

export default WithPost({
  title: 'Django+Heroku: Multiple methods of serving static files',
  date: 'March, 2013',
  html: `
  <p><p>During my move to Heroku, I learned a few things about the quirks of their django hosting. In particular, the official documentation about the serving of static files isn't too useful. Luckily, I found some helpful blog posts documenting this. They basically seemed to fall into two camps:</p><ol><li>Use the django server itself for the static files</li><li>Use a separate service like AWS to serve the static files.</li></ol>Below I talk about the pros and cons of each method, and how to implement a combination of both of them.<br/><br/><p><b>1. Static files via the Django Server</b></p><p>This blog post covers how to do this very well:&nbsp;<a href="http://matthewphiong.com/managing-django-static-files-on-heroku">http://matthewphiong.com/managing-django-static-files-on-heroku</a></p><p>Pros:</p><ul><li>* easy to implement</li><li>* static files are served from same domain (no issues with CORS, etc.)</li></ul>Cons:<ul><li>* inefficient, the django server isn't really made to be serving these kinds of files</li><li>* not tied to additional services</li></ul><p><b>2. Static files with AWS&nbsp;</b></p><p>A great guide to implementing this is here:&nbsp;<a href="http://offbytwo.com/2012/01/18/deploying-django-to-heroku.html">http://offbytwo.com/2012/01/18/deploying-django-to-heroku.html</a></p><p>Pros:</p><p></p><ul><li>* speed. aws is very fast</li><li>* feel good about doing things the 'right' way</li></ul><p></p><p>Cons:</p><p></p><ul><li>* additional set-up time</li><li>* can cause CORS issues</li></ul><p></p><p><b>Implementing Both</b></p><p>I recommend that you use AWS as much as possible. For me, I had all of my files on AWS, but this was causing some issues when I wanted to host files that javascript wanted access to - specifically I wanted to load up some images and use processing.js to do some visual manipulation on them.</p><p>The secret to implementing both of them is to use&nbsp;<i>two separate settings files.</i></p><p>Keep your aws settings in the regular&nbsp;<b>settings.py</b>&nbsp;file, and create a second file, call it&nbsp;<b>settingsnoaws.py&nbsp;</b>and set it up like you would via the blog post in section 1.&nbsp;</p><p>Now, the post in section one has you manipulating the Procfile by prepending a collectstatic command to it. We are going to change that command slightly:</p><p><pre>python manage.py collectstatic --settings=&lt;python module name for settingsnoaws.py&gt;</pre></p><p>Replace&nbsp;<b>&lt;python module name for settingsnoaws.py&gt;&nbsp;</b>with the relevant python module path (e.g. for this site it was "mathisonian.settingsnoaws").</p><p>Then, make sure you've updated your urls file to serve static files with django (as shown in the first blogpost) and use the url&nbsp;<b>/static/&lt;filename&gt;</b>&nbsp;to serve any static file you want with django.</p><p>NOTE: In this setup STATIC_URL will resolve to aws, and you will have to hardcode /static/... urls for any files you want to serve with the django server.</p><br></p>
`
});
